@using Codeer.LowCode.Bindings.Fluent.Blazor.Extensions
@using Codeer.LowCode.Blazor.Repository.Design
@using Codeer.LowCode.Blazor.OperatingModel
@using Codeer.LowCode.Bindings.Fluent.Blazor.Internal.Components
@inherits FluentFieldComponentBase<BooleanField, FluentBooleanFieldDesign>

@if (Field.ModuleLayoutType == ModuleLayoutType.List && Field.IsViewOnly) {
  <span class="d-block py-2">
    @ViewOnlyValue
  </span>
} else {
  if (Field.Design.UIType == BooleanUIType.CheckBox) {
    <FluentCheckbox Id="@WebElementId.DomSafeString()" @bind-Value:get="@IsChecked" @bind-Value:set="@OnChange" Disabled="@(IsDisabled || IsViewMode)" Label="@Label" />
  } else if (Field.Design.UIType == BooleanUIType.Switch) {
    <FluentSwitch Id="@WebElementId.DomSafeString()" @bind-Value:get="@IsChecked" @bind-Value:set="@OnChange" Disabled="@(IsDisabled || IsViewMode)" Label="@Label" />
  } else if (Field.Design.UIType == BooleanUIType.ToggleButton) {
    <InternalFluentToggleButton Id="@WebElementId.DomSafeString()" @bind-Value:get="@IsChecked" @bind-Value:set="@OnChange" Disabled="@(IsDisabled || IsViewMode)" Label="@Label" />
  }
}

@code {
  private bool IsDisabled => Field.IsEnabled == false;
  private bool IsViewMode => Field.IsViewOnly;
  private bool IsChecked => Field.Value == true;
  private string Label => Field.Design.Text;
  private object? ViewOnlyValue => Field.Services.AppInfoService.IsDesignMode ? "Boolean" : Field.Value;

  private async Task OnChange(bool isChecked) {
    await Field.SetValueAsync(isChecked);
  }

}