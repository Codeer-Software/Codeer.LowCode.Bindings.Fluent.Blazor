@using Codeer.LowCode.Bindings.Fluent.Blazor.Extensions
@using Codeer.LowCode.Blazor.Components.Renderer
@using Codeer.LowCode.Blazor.OperatingModel
@using Codeer.LowCode.Blazor.Components.Dialog
@using Codeer.LowCode.Blazor.Repository.Match
@inherits FluentFieldComponentBase<LinkField, FluentLinkFieldDesign>

@if (IsViewMode) {
  <span class="d-block py-2">@ViewOnlyValue</span>
} else {
  <FluentStack>
    @if (IsSelectOnly) {
      <FluentTextField Value="@DisplayText" Disabled="@IsDisabled" ReadOnly="true" Id="@WebElementId.DomSafeString()">
        @if (HasValue) {
          <FluentIcon OnClick="@Clear" Slot="end" Value="@(new Icons.Regular.Size16.Delete())"/>
        }
      </FluentTextField>
    } else {
      <FluentTextField @bind-Value:get="@DisplayText" @bind-Value:set="RaiseOnValueChanged" Id="@WebElementId.DomSafeString()">
        <FluentIcon OnClick="@Clear" Slot="end" Value="@(new Icons.Regular.Size16.Delete())"/>
      </FluentTextField>
    }
    <FluentButton IconEnd="@(new Icons.Regular.Size20.Search())" OnClick="OpenModal" Disabled="@IsDisabled"
                  data-system="search"/>
  </FluentStack>

  <ModalBase @bind-IsOpen="_isModalOpen" Title="検索" Size="modal-lg">
    @if (_isModalOpen) {
      <LinkTableRenderer SearchConditions="@Conditions" ItemSelected="OnItemSelected" ModuleDesign="Field.Module.Design"
                         LinkFieldDesign="Field.Design"/>
    }
  </ModalBase>
}

@code {
  private bool _isModalOpen;
  private SearchCondition Conditions => Field.GetSearchConditionAssignedValue();

  private bool IsSelectOnly => !string.IsNullOrEmpty(Field.Design.DisplayTextVariable);
  private bool IsDisabled => Field.IsEnabled == false;
  private bool IsViewMode => Field.IsViewOnly;
  private bool HasValue => Field.Value != null;
  private string DisplayText => Field.DisplayText;
  private string? ViewOnlyValue => Field.Services.AppInfoService.IsDesignMode ? "Link" : DisplayText;

  private async Task OpenModal() {
    await Task.CompletedTask;
    _isModalOpen = true;
  }

  private void CloseModal() => _isModalOpen = false;

  private async Task RaiseOnValueChanged(string? value) {
    await Field.SetValueAsync(value);
  }

  private async Task OnItemSelected(Module obj) {
    CloseModal();
    await Field.SetValueAsync(obj);
  }

  private async void Clear() {
    await Field.SetValueAsync((string?)null);
  }

}