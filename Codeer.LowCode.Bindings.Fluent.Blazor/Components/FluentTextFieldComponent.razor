@using Codeer.LowCode.Bindings.Fluent.Blazor.Extensions
@using Codeer.LowCode.Blazor.OperatingModel
@inherits FluentFieldComponentBase<TextField, FluentTextFieldDesign>

@if (IsViewMode) {
  <span class="d-block py-2" style="@(WhiteSpaceStyle())">@ViewOnlyValue</span>
} else {
  if (Field.Design.IsMultiline) {
    <FluentTextArea @bind-Value:get="@Value!" @bind-Value:set="@RaiseOnValueChanged" Id="@WebElementId.DomSafeString()"
                    Disabled="@IsDisabled" ReadOnly="IsViewMode" Maxlength="@(MaxLength ?? 524288)"
                    Placeholder="@Placeholder" Rows="@Rows"/>
  } else {
    <FluentTextField @bind-Value:get="@Value!" @bind-Value:set="@RaiseOnValueChanged" Id="@WebElementId.DomSafeString()"
                     Disabled="@IsDisabled" ReadOnly="IsViewMode" Maxlength="@(MaxLength ?? 524288)"
                     Placeholder="@Placeholder"/>
  }
}

@code {
  private bool IsDisabled => Field.IsEnabled == false;
  private bool IsViewMode => Field.IsViewOnly;
  private string? Placeholder => Field.Design.Placeholder;
  private int? MaxLength => Field.Design.MaxLength;
  private int Rows { get; set; }
  private string? ViewOnlyValue => Field.Services.AppInfoService.IsDesignMode ? "text" : Field.Value;
  private string? Value => Field.Value;

  protected override void OnParametersSet() {
    base.OnParametersSet();
    Rows = Field.Design.Rows ?? 3;
  }

  private async void RaiseOnValueChanged(string? value) {
    await Field.SetValueAsync(value);
  }

  private string WhiteSpaceStyle()
    => Field.Design.IsMultiline ? "white-space: pre-line" : "";

}